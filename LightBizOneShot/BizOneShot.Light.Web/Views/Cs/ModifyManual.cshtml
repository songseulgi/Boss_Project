@model BizOneShot.Light.Models.ViewModels.ManualDetailViewModel

@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}

@Scripts.Render("~/Js/files.js")

<script>
    $(document).ready(function () {
        //top menu
        $('#naviwrap_biz > .navi_biz >  a.navi_CS').addClass('on');
        //Cs menu
        $('#sub_leftwrap > .sub_gnbwrap > ul > li > a.gnb_menual').addClass('on');

        $('#submit_form').bind('submit', function () {
            //필수값체크
            if ($('#FormType').val().trim() == "") {
                alert("구분은 필수값입니다.");
                $('#FormType').focus();
                return false;
            }
            if ($('#subject').val().trim() == "") {
                alert("제목은 필수값입니다.");
                $('#subject').focus();
                return false;
            }
            if ($('#contents').val().trim() == "") {
                alert("내용은 필수값입니다.");
                $('#contents').focus();
                return false;
            }


            //첨부파일체크
            var inputFileCount = 0;
            var fileSize = 0;
            var totalSize = 0;
            var fileNames = new Array();
            $('input[id="inputFile"]').each(function () {
                if ($(this).val() != '') {
                    //input에서 파일이름만 추출해서 담음
                    fileNames.push($(this).val().replace(/^.*[\\\/]/, ''));
                    fileSize = $('input[id="inputFile"]').get(inputFileCount).files[0].size;
                    totalSize = totalSize + fileSize;

                    //inputFileCount += 1;
                }
                inputFileCount += 1;
            });

            //이미등록된 파일명 가져오기
            var existFileCount = 0;
            $('#ulExitFiles li').each(function () {
                fileNames.push($(this).text().trim());

                existFileCount += 1;
            });

            if (inputFileCount > 5) {
                alert("파일갯수는 5개를 초과할 수 없습니다.");
                return false;
            }

            if (totalSize > 10000000) {
                alert("전체 파일 사이즈는 10MB 를 초과할 수 없습니다.");
                return false;
            }

            var hasDups = !fileNames.every(function (v, i) {
                return fileNames.indexOf(v) == i;
            });
            if (hasDups) {
                // having duplicate values
                alert("업로드할 파일에 같은 파일이 있습니다.");
                return false;
            }

            if (!confirm("메뉴얼을 수정 하시겠습니까?")) {
                return false;
            }

        });
    });

    var array = [];
    function delete_file(value) {
        array.push(value);
        $("#deleteFileSns").val(array);
    };
</script>

<div id="sub_rightwrap">
    <div class="sub_right_title admin0505"><em>매뉴얼 및 서식 관리</em></div>
@using (Html.BeginForm("ModifyManual", "Cs", FormMethod.Post, new { area = "", id = "submit_form", role = "form", enctype = "multipart/form-data" }))
{
    @Html.Hidden("deleteFileSns", "", new { @id = "deleteFileSns", @name = "deleteFileSns" })
    @Html.HiddenFor(model => model.Manual.FormSn)
    <div class="tablewrap">
        <table>
            <caption>매뉴얼 및 서식 관리 수정하기</caption>
            <colgroup>
                <col width="100px" />
                <col width="260px" />
                <col width="100px" />
                <col width="150px" />
                <col width="140px" />
            </colgroup>
            <tr>
                <th><label for="">구분</label></th>
                <td colspan="4" class="form">
                    @Html.DropDownListFor(model => model.Manual.FormType, new SelectList(
                           new List<Object>{
                                           new { value = "" , text = "구분선택"  },
                                           new { value = "M" , text = "매뉴얼" },
                                           new { value = "N" , text = "일반서식" },
                                           new { value = "S" , text = "SCP 표준서식" },
                                           new { value = "P" , text = "프로그램" }
                             },
                           "value",
                           "text",
                            2), new { @class = "w160", @id = "FormType" })
                </td>
            </tr>
            <tr>
                <th>제목</th>
                <td colspan="4" class="form">
                    @Html.TextBoxFor(model => model.Manual.Subject, new { @class = "w630", @id = "subject" })
                </td>
            </tr>
            <tr>
                <th>등록일</th>
                <td colspan="4" class="form">
                    @Html.TextBoxFor(model => model.Manual.RegDt, Model.Manual.RegDt.GetValueOrDefault().ToShortDateString(), new { @class = "w630", @readonly = "readonly" }) 
                </td>
            </tr>
            <tr>
                <td colspan="5" class="modify">
                    @Html.TextAreaFor(model => model.Manual.Contents, new { @id = "contents" })
                </td>
            </tr>
            <tr>
                <th>첨부파일</th>
                <td colspan="4" class="nopad">
                    <div id="file_upwrap">
                        <ul>
                            <li>
                                <!--파일1-->
                                <input type="text" class="file" readonly="readonly" />
                                <button type="button" class="file_search" value="찾아보기" onclick="return file_add(this);"></button>
                                <button type="button" class="file_add" value="파일추가" onclick="return file_inpput_add(this);"></button>
                                <button type="button" class="file_del" value="파일삭제" onclick="return file_inpput_remove(this);"></button>
                                <em><input type="file" name="files" onchange="return get_filename(this)" /></em>
                            </li>
                        </ul>
                    </div>

                    @if (Model.ManualFiles.Count > 0)
                    {
                        <div id="file_downwrap">
                            <ul id="ulExitFiles">
                                @foreach (var item in Model.ManualFiles)
                                {

                                    <li>
                                        <span>@item.FileNm</span>
                                        <button type="button" class="bt_td_delete" value="@item.FileSn" onclick="delete_file(@item.FileSn); return file_inpput_remove2(this);"></button>
                                    </li>

                                }
                            </ul>
                        </div>
                    }
                </td>
            </tr>

        </table>
    </div><!--tablewrap//-->

    <div id="btnwrap_sub">
        <div class="rightwrap">
            <button type="submit" class="save2" id="btn_save" name="btn_save"><em>저장</em></button>
            <button type="button" class="cancel2 right" value="취소" onclick="if (confirm('지금까지 작성된 내용을 취소하시겠습니까?')) location.href='@Url.Action("Manual", "Cs")'" />
            @*<a href="@Url.Action("Manual", "Cs")" class="cancel2 right"><em>취소</em></a>*@
        </div>
    </div><!--btnwrap_sub//-->
}

</div><!--sub_rightwrap//-->